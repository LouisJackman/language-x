use std::collections::HashMap;

use lexing::tokens::Token;

pub fn new() -> HashMap<&'static str, Token> {
    let mut map = HashMap::new();
    map.extend(vec![
        ("_", Token::Ignore),
        ("as", Token::As),
        ("class", Token::Class),
        ("continue", Token::Continue),
        ("default", Token::Default),
        ("do", Token::Do),
        ("else", Token::Else),
        ("embeds", Token::Embeds),
        ("extends", Token::Extends),
        ("for", Token::For),
        ("get", Token::Get),
        ("if", Token::If),
        ("ignorable", Token::Ignorable),
        ("implement", Token::Implement),
        ("implements", Token::Implements),
        ("import", Token::Import),
        ("interface", Token::Interface),
        ("override", Token::Override),
        ("package", Token::Package),
        ("select", Token::Select),
        ("super", Token::Super),
        ("switch", Token::Switch),
        ("throw", Token::Throw),
        ("timeout", Token::Timeout),
        ("var", Token::Var),
        ("where", Token::Where),
        ("virtual", Token::Virtual),
        // Reserved but not used.
        ("atom", Token::ReservedKeyword),
        ("blittable", Token::ReservedKeyword),
        ("case", Token::ReservedKeyword),
        ("catch", Token::ReservedKeyword),
        ("defer", Token::ReservedKeyword),
        ("data", Token::ReservedKeyword),
        ("derives", Token::ReservedKeyword),
        ("dyn", Token::ReservedKeyword),
        ("dynamic", Token::ReservedKeyword),
        ("extern", Token::ReservedKeyword),
        ("exports", Token::ReservedKeyword),
        ("finally", Token::ReservedKeyword),
        ("fixed", Token::ReservedKeyword),
        ("ffi", Token::ReservedKeyword),
        ("forall", Token::ReservedKeyword),
        ("in", Token::ReservedKeyword),
        ("internal", Token::ReservedKeyword),
        ("it", Token::ReservedKeyword),
        ("native", Token::ReservedKeyword),
        ("macro", Token::ReservedKeyword),
        ("module", Token::ReservedKeyword),
        ("mutating", Token::ReservedKeyword),
        ("mutable", Token::ReservedKeyword),
        ("mutate", Token::ReservedKeyword),
        ("operator", Token::ReservedKeyword),
        ("pattern", Token::ReservedKeyword),
        ("pure", Token::ReservedKeyword),
        ("quasiquote", Token::ReservedKeyword),
        ("quote", Token::ReservedKeyword),
        ("reader", Token::ReservedKeyword),
        ("ref", Token::ReservedKeyword),
        ("requires", Token::ReservedKeyword),
        ("stackalloc", Token::ReservedKeyword),
        ("static", Token::ReservedKeyword),
        ("seq", Token::ReservedKeyword),
        ("struct", Token::ReservedKeyword),
        ("sync", Token::ReservedKeyword),
        ("total", Token::ReservedKeyword),
        ("transient", Token::ReservedKeyword),
        ("try", Token::ReservedKeyword),
        ("then", Token::ReservedKeyword),
        ("unsafe", Token::ReservedKeyword),
        ("unquote", Token::ReservedKeyword),
        ("use", Token::ReservedKeyword),
        ("using", Token::ReservedKeyword),
        ("yield", Token::ReservedKeyword),
        ("value", Token::ReservedKeyword),
    ]);
    map
}
