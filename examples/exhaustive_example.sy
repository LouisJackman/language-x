#!/usr/bin/env sylan 

// Basic use of shebangs are just to ease execution on Unix-like systems, but
// more complex usages of it can completely change the way a program is
// interpreted.
//
// Later in this file, you'll see examples of macros, which give a function
// the ability to change language syntax. Reader macros provide token-level
// and even character-level reading of the program. This allow effectively
// unlimited linguistic abstractions. They can be invoked in many ways, and
// shebangs are one of them.
//
// They are mentioned in shebangs like so:
//
// `#!/usr/bin/env -S sylan -l exampleModule.examplePackage.exampleReader`
//
// A macro mentioned in the shebang, using normal package lookup notation after
// a `-l` flag, will get a pass through the whole program from the line after
// the shebang to the end of the file.
//
// Sylan ignores most of the shebang, since it's primarily of the benefit of the
// OS. The exception is when it encountered `sylan` seperated by whitespace. It
// will then interpret subsequent `-v` and `-l` arguments to work out how to
// parse the source file, where both take a comma-seperated list of version
// numbers and reader macro lookups respectively.
//
// Furthermore, multiple languages can be separated by commas, creating a tower
// of nested languages. Interpretation goes through each macro, from left to
// right.
//
// It must emit a whole valid Sylan file its provided pipeline, or an invalid one
// that a later reader in the pipeline can understand. Either way, a valid Sylan
// program must end up at the end of the pipeline.
//
// `-S` is discarded by Sylan, like most of the shebang. It's used by GNU
// coreutils and FreeBSD's userland to split the subsequent words when invoking
// the program, working around a common problem with Unix shebangs.
//
// This syntax is chosen for a reason; if the shebang is run directly from a
// Unix-like system, it will also interpret the file under that package's reader
// macro due to understanding the `-l` flag. This means the shebang allows
// whole-file macros to apply to both imported files and ones started from the
// shell.

package
    /*
     * Package names are derived from the file name. A package invoked directly
     * is the _main package_, regardless of whether it's named "main" or not. A
     * `module-info.sy` file is not required for the top level program as there
     * is an inferred main module that contains top-level programs.
     *  
     * Unlike many other languages, import is not just name shortening; if
     * something is not imported, it can't be used in a package. Furthermore,
     * packages only have _one_ unified import for all imported items. This
     * means the dependencies of any package can be enumerated comprehensively
     * from the same place. This can assist in composing Bill of Materials
     * manifests, for example. This means Sylan packages are more similar to
     * Go packages than Java's or Rust's.
     *
     * Importing is solely for giving access to within the package. Imports are
     * _not_ implicitly loaded into the public-facing surface of the package
     * itself. Imports never become part of a package's API surface unless they
     * made `public` via a wrapper item or a published alias with `public.
     *
     * Like Go, Sylan also bans recursive package imports.
     *
     * Only packages and their top-level items can be imported. A package can
     * only refer to its own definitions or imports. Therefore, `this.module`
     * is only usable in imports. Also, it means only one package name ever
     * appears in a symbol resolution. There isn't the notion of "walking" a
     * a package hierarchy, except in imports.
     *
     * A consequence of this is that the longest symbol in Sylan can be:
     * `package1.enum1.variant`, for enum variants.
     *
     * There are no equivalents to having `java.util.List` or
     * `java.util.concurrent.atomic.AtomicInteger`; either a package is imported
     * or not; if it is, only then can you access its contents, and it's just
     * one identifier at that point since it has been imported.
     *
     * In fact, there is no real relationship between a package and a subpackage
     * apart from naming. If a package wants to access a subpackage or
     * vice-versa, they must explicitly import it like anywhere else.
     *
     * All items from `sylan.lang` are preimported into every package. Most of 
     * the following item imports are aliased and published in that prelude
     * package and thus already imported. They are explicitly imported here to
     * give an idea of the standard package structure. Sylan normally won't
     * tolerate imports with the same name, mandating `as` to give them
     * alternative names, but makes an exception for `sylan.lang` preimports;
     * they just get hidden. In that case, `import sylan.lang` will be necessary
     * to get the back, with symbols like `lang.Boolean`.
     *
     * By default, the first identifier in a lookup is the module. If that
     * clashes with a top-level package in the current module, the package takes
     * priority. To refer to the module in this case, one can drop relative
     * symbols and use _absolute symbols_ instead, which are prefixed with
     * `global.`. There are also dotted forms of `this`, `this.module` and
     * `this.package`, which refer to the modules and packages in which they
     * reside. `this.package` is solely for accessing package items from a class
     * whose methods, fields, parameters, or types parameters clash with their
     * names.
     *
     * Using `this` in a list of imports brings in the package which the list
     * is looking at. E.g.: `import sylan.core.optional { this, Empty }`
     * imports three items: `optional` and `Empty`. Their full paths
     * (which can't be used directly in code) are `sylan.core.optional`,
     * and `sylan.core.optional.Empty`.
     *
     * For example, all the imports here are from the `sylan` module, which is
     * already available for all Sylan programs.
     *
     * Importing a package only allows referring to that package or its items.
     * For a subpackage, that must be imported explicitly too; a developer can't
     * just walk up from a core module to any package using several dots.
     */
(
    sylan {
        core {
            optional { this, Empty },
            concurrency.intrinsics.AtomicMachineType,
        },
        base {
            io.output.println,
            util {
                toString.ToString,
                collections {
                    this,
                    List,
                },
                datetime.ZonedDateTime,
            },
            runtime.concurrency.Task,
        },
    },

    // The invoked main file is implicitly the "main" package.
    // If a subpackage is used, then it must be explicitly imported.
    // If the subpackage is in the same file, it is implicitly imported.
    // So this import is not strictly necessary and is solely illustrative.
    main.counter,

    package1,

    // Packages can also be interpreted with specific macros, even if those
    // files have no knowledge of such macros.
    //
    // Putting `syntax` next to a package item import rather than a package
    // will yield an error.
    package2 with reader (package1.readAsLisp) { item1, item2 },

    // In fact, such files might have no knowledge of even Sylan...
    module1.`package1.lisp` with reader (package1.readAsLisp),

    // Like shebangs, multiple macros can be specified to create a pipeline of
    // langauge interpretation:
    module1.`package1.lisp` with reader (package1.readAsLisp, package1.readAsKernelLisp),

    // Note that backquoting an import component allows using any name for the file,
    // even otherwise-reserved keywords, and also stops putting `.sy` and the end
    // of the file path lookup.
)

class HashMap = collections.map.Hash

fun fizzBuzz(_ n Int) Int {

    // Sylan supports blocks, syntactical sugar for passing a lambda as a final
    // argument to an invocable. Note the use of `it` as a shorthand for
    // one-argument lambdas.
    1.up(to: n).each -> {
        switch {
            0 == (it % 15) { "FizzBuzz" }
            0 == (it % 5)  { "Fizz" }
            0 == (it % 3)  { "Buzz" }
            _              { it }
        } |> println
    }
}

fizzBuzz(100)

fun demoIteration
    /**
     * SyDocs can be written for code documentation. Unlike JavaDoc, they go
     * directly after the item they document, to ensure that the most important
     * information, i.e. what is being documented, is kept upfront.
     *
     * They depart significantly from most language's documentation comments
     * too, insofar as they document items _directly_ rather than referring to
     * them with tags like `@param` or `@return`.
     *
     * Rather than keeping a tag in sync with an actual parameter name, a
     * developer _knows_ they'll always be in sync because they're after the
     * parameter itself.
     */
() {

    // Finals must have explicit types in packages, but must infer types inside
    // methods and functions. They cannot exist in interface and class bodies
    // directly, as it makes no sense to "instantiate" a final.
    final n = 42
    final world = "World"

    // String interpolation is done with `$""`.
    println($"Hello, {world}! Number {n}.")
    
    var highlight = -> s {

        // Compact string interpolations only work with compile-time values.
        // The standard `tainted` string template function can be used to
        // generated tainted strings from runtime values.
        //
        // Most string functions should work with tainted strings, but some
        // places can choose not to, such as SQL libraries taking queries
        // from strings.
        //
        // Custom string template functions can implement conversions from
        // tainted back into non-tainted if they're confident in their escaping
        // logic. For example, a SQL library could implement a `sql` template
        // function that takes a tainted string and untaints it after escaping,
        // e.g.:
        //
        // ```
        // var name = http.parameter[|"first_name"|]
        // 
        // query($sql"""
        //
        //     select *
        //     from accounts
        //     where first_name = {name}
        //
        // """)
        // ```
        $tainted">> {s} <<"
    }

    // The ~ operator composes invocables together, from left to right.
    1.up(to: 5)
        .map(:doubled ~ :toString ~ highlight)
        .each(println)

    List(1, 2, 3).each -> n {

        /*
         * `println` takes any `ToString` type to ultimately print a string.
         */
        println(n)
    }

    var quadruple = -> { it.doubled.doubled }

    123456789
        |> quadruple
        |> :toString
        |> highlight
        |> println

    // Prefixing a function call with a dollar and ending with braces rather
    // than quotes invokes it with _variadic entries_, a concise layout of
    // key-value pairs to a function. One common use case could be for map
    // types. In fact, a dollar followed immediately with a brace with no
    // explicit name is a `sylan.base.util.collections.map.Hash`.
    var map = ${
        "abc": 123,
        "def": 321,
        "ghi": 987,
    }
    map.each -> key, value {
        println($tainted"{key}: {value}")
    }

    do -> {

        // `use` invokes an expressions AutoClose method at the end of the
        // current block, even if the program dies due to an exception (which
        // are seen as truly exceptional in Sylan and thus cannot be caught).
        //
        // In this context, "closing" a task kills it, which, unlike Java
        // threads, is safe.
        var counterService = use spawn -> {
            for var n = 0 {
                var sender = select Task {
                    x { x }
                }
                if n < 5 {
                    send(Optional(of: n), to: sender)
                    continue(n + 1)
                } else {
                    send(Empty, to: sender)
                    continue(n)
                }
            }
        }

        5.times -> {
            send(self, to: counterService)
        }

        // `while var`, like `if var`, can handle multiple refutable patterns
        // seperated by commas. In this case, all patterns must match to
        // continue into the block.
        //
        // Unlike `for`, `while var` and `if var` take refuttable patterns
        // rather than irrefuttable ones.
        while var .Some(n) = select Optional[of: int] {
            x { x }
        } {
            println(n)
        }
    }

    /*
     * `for` is a cross between Java's enhanced-for loop and Scheme's named-let.
     * It looks similar to `while let`, but takes irrefutable bindings rather
     * than refuttable ones.
     */
    var factorial = for var n = 20, result = 1 {
        if n <= 0 {
            result
        } else {

            // Continue, like `it`, is a keyword representing an implicit
            // variable. In this case it stands for the inner-most
            // unlabelled for loop.
            continue(n: n - 1, result: n * result)
        }
    }

    for outer var n = 10 {
        if 0 < n {
            for {

                // This for loop is labelled as "outer", so that is available
                // to call as a function if iteration is desired. That allows
                // it to skip the inner `for` here; `continue` in this context
                // would cause an infinite loop.
                outer(n - 1)
            }
        }
    }

    // `println` takes not just an object implementing `ToString`, but a
    // varadic amount of them. However, it expects the _same_ implementation
    // of `ToString`, hence the explicit `.toString()` invocation here.
    println("factorial:", innerFactorial.toString())
}

fun internal factorial
    /**
     * All packages, classes, methods, and finals are private unless explicitly
     * opened up with the `public` keyword. If the developer wants to expose them
     * openly but only to its own module, they can use the `internal` keyword.
     *
     * As can be seen in this function and the previous, Sylan allows functions to
     * stand alone in packages without being tied to classes or interfaces.
     */
(
    of n Int
    /** SyDoc supports documenting parameters directly. */
) 
    Int
    /** Return values, too. */
{
    switch n {
        0, 1 { 1 }
        n if n < 0 {
            throw Exception("n cannot be less than 0")
        }
        n {
            /*
             * Guaranteed tail call elimination will ensure a stack overflow
             * does not occur.
             */
            factorial(n * (n - 1))
        }
    }
}

fun internal ignorable printFactorial
    /**
     * Sylan does not allow callers to throw away non-`Void` function or methods
     * results unless their return values are have an `ignorable` modifier.
     *
     * This makes sense when getting a return value is potentially useful but
     * not the entire reason behind invoking it. Such a function or method can
     * be assumed to have side effects, with the exception of constant-time
     * operation NOPs or the like.
     *
     * Do not use this to discard errors. If a error type truly must be omitted
     * from an API, at least make it throw an exception instead.
     */
(_ n Int) Int {
    var result = factorial(of: n)
    println(result)

    /*
     * Sylan is an expression-oriented language, so everything returns a value
     * including loops and `if`s. Therefore, the last value is returned by
     * default. The lack of explicit `return`s means there is always a single
     * exit point from a function or method: the last expression.
     *
     * Having a guaranteed single exit point from a function makes it easier to
     * reason about, which is presumably why Niklaus Wirth had a preference for
     * it in structured programming. 
     */
    result
}

fun twice
[
    N extends Number: int
    /** Type parameters can also be documented with SyDocs. */
](_ n N, do f (N) N) N {
    f(n) + f(n)
}

fun double[N extends Add & ToString](_ n N) String {
    (n + n).toString()
}

fun printNumber
    /**
     * Sylan uses concrete implementations of interfaces only, such as `Number`
     * here. Dynamic dispatch does not exist in Sylan because it overlaps too much
     * with sum types, a.k.a discriminated unions or enhanced enums.
     * 
     * In this way, Sylan's interfaces are closer to Haskell's typeclasses than
     * Java 8's enhanced interfaces.
     * 
     * Extension classes give the ability for packages to statically add operations
     * to other package's types. This is still not using dynamic dispatch, however.
     */
(_ n Number) {
    println(n)
}

fun demoContexts() Optional[Int] {
    println("Demoing contexts...")

    /*
     * Haskell developers will recognise this as the applicative do notation,
     * which Sylan calls "contexts". Haskell programmers already know the
     * benefits of this construct; non-Haskell programmers will be glad to know
     * that this feature can make tangled code such as optionality-checking
     * chains, error-handling, and validation code much cleaner.
     *
     * Developers from other languages like Swift and JavaScript might
     * recognise the question mark here; the difference is that Sylan allows it
     * for any applicative type, not just optional types.
     */
    with {
        Optional(of: 5)
        println("Doing something.")

        var _ = Empty?
        println("Will not be run.")
        Empty
    }
}

enum List[of Element](

    // Enum variants mirror normal functions, and are called like them too.
    // The names of the elements become important for pattern matching.

    Node(of element Element, next This),
    /** As you'd expect, enum variants can be documented individually. */

    Nil,
) {
    fun each(do (element Element)) {
        switch this {

            // Pattern matching follows similar rules to function parameter
            // lists. In particular, if a matched field matches a parameter
            // name, an explicit label is not needed. Furthermore, a label is
            // implicitly the same as a parameter name if omitted. In fact,
            // _most_ pattern matches are expected to use both of these
            // shortcuts combined.
            //
            // Utilising both of them makes pattern matching appear similar to
            // other functional languages while retaining consistency with
            // function calls. This is important because Sylan unifies function
            // calls and type instantiations rather than using a separate syntax
            // for both.
            Node(element, next) {
                do(element)
                next.each(do)
            }

            Nil { }
        }
    }

    // That switch was being illustrative. It'd been easier to use `if var`:
    // `if var Node(element, next) = this {`
}

enum CounterMsg(Increment, Get(to recipient Task))

fun startCounter() {
    spawn -> {
        for var count = 0 {
            select CounterMsg {
                .Increment { continue(count + 1) }
                .Get(recipient) {
                    send(count, to: recipient)
                    continue(count)
                }
                timeout 10.seconds { throw Exception("timed out!") }
            }
        }
    }
}

//
// Alternatively, just use `Ref`, which also makes cleanup easier:
//
class Counter implements AutoClosable {
    var count Ref[to: Int] = Ref(to: 0)

    fun public override close = count.close

    fun public get() { count.value }
    fun public inc() { count.alter(_ + 1) }
}

fun `test that addition works`
    /**
     * Backquotes can be used to allow any character in an identifier name. This is
     * designed for these cases:
     *
     *  * Allowing fluent sentence-like test cases like below.
     *  * Easing interoperability with foreign APIs that use different naming
     *    contentions.
     *  * Using Sylan keywords as symbols.
     *
     * Like normal strings, they also support raw mode and custom delimiters.
     * Interpolation is obviously not supported, however.
     */
{
    assert((2 + 2) == 4)
}

interface Concatenate[with T, producing U extends T] {
    fun public concatenate(withEnd that T) T
}

interface Equal[to T] {
    fun public equal(to that T) Boolean

    fun public notEqual
        /**
         * Sylan's interface methods can have bodies like Java 8's defender methods.
         * Unlike Java 8, private methods with bodies are also allowed with them.
         */
    (to that T) Boolean {
        not(equal(to: that))
    }
}

class Name
    /**
     * Hashing, equality checking, and the constructor all just exist
     * automatically. They can still be manually overridden if necessary though.
     * `close` is also automatically implemented for classes that implement
     * `AutoCloseable`, the default implementation just closing all
     * `AutoCloseable` fields. This can also be overridden if the default
     * implementation makes no sense.
     */
(
    var internal firstName String,
    var internal lastName String,
)
// Braces can be dropped off a class. In this case, they act as simple data
// groups with no additional logic.

class Account
    /** 
     * Classes can implement interfaces but cannot extend other classes.
     * Interfaces can extend other interfaces though. Concrete inheritance
     * generally causes more problems that it's worth and class item aliasing
     * plus a more powerful interface system makes up for the difference.
     */
(
    firstName String,
    lastName String,

    // Prefixing a class parameter with `var` upgrades it to a field, vaguely
    // similar to TypeScript's equivalent feature. This is syntactical sugar
    // for passing a normal parameter and assigning it to a new field in a class
    // body.
    //
    // Fields are either `var`s or `var fun`. The latter is just a no-argument
    // method that must be invoked with no parentheses and are guaranteed to be
    // API-compatible with a `var` field. A var is set once, whereas a `var fun`
    // reevaluates every time it is looked up.
    //
    // If a developers wants to back a public `var fun` with a backing field,
    // they must use a private backing field with a different name since fields
    // and methods use the same namespace.
    var internal ageInYears Int,

) implements ToString, Concatenate[to: This] {

    {
        // Instance initializers are optional but must appear before anything else
        // in a class body and there can be only one. However, they are invoked
        // _at the end_ of object construction, meaning they can access all
        // defined fields and methods. They allow invoking side-effects upon a
        // class instantiation.
        //
        // As Sylan is an immutable language, this feature does not allow assigning
        // values to fields like constructors in traditional OO languages.
        //
        // This is effectively the same as invoking a side-effect inside a field
        // initialiser, except no field is being assigned:
        //
        // var _ Void = do -> {
        //     println("Inside a field initialisation...")
        //     println("instantiating an Account...")
        // }
 
        println("instantiating an instance initialiser...")
        println("instantiating an Account...")

        // If a local method called `println` was defined, that'd be called
        // instead. If a package-level function is needed instead, refer to
        // it by its full package name, or even use the `this.package.
        // convenience form, e.g. `this.package.println("test")`.
    }

    var internal name Name = Name(first: firstName, last: lastName)

    var expiry ZonedDateTime = ZonedDateTime.now + 1.year

    // Automatically generated field getters can be overridden with custom
    // implementations like the following, which can then access the original
    // field with `this.`.
    //
    // Note that all access to a field without the `this.` sigil, even from
    // inside the class itself, is going via the getter methods.
    var fun public expiry ZonedDateTime {
        println("the original expiry was", this.expiry.toString())

        this.expiry + 1.year  // Ultimately yields now plus two years
    }

    fun public override toString() String {
        $tainted"{firstName} {lastName} is {ageInYears} years old"
    }

    fun public override concatenate(withEnd that This) This {
        var first = firstName.concatenate(withEnd: that.name.firstName)
        var last = lastName.concatenate(withEnd: that.name.lastName)

        Account(
            firstName: first,
            lastName: last,
            ageInYears: ageInYears + that.ageInYears,
        )
    }

    var public name String = firstName + " " + lastName

    var fun public locked Boolean {
        expiry < ZonedDateTime.now
    }
}

extend class Account
    /**
     * Type extensions allow modules to add their own features to an existing class
     * when imported. Note that this implements `Concatenate` again just with
     * different type parameters passed to `Concatenate`; Sylan considers these to
     * be two completely different implementations. This is a more disciplined
     * replacement for method overloading.
     */
implements Concatenate[to: This, producing: String] {

    fun public override concatenate(withEnd: that This) String {
        firstName + " " + that.firstName
    }
}

fun demoPatternMatching() {
    var account1 = Account(firstName: "Tom", lastName: "Smith")
    var matchingLastName = "Smith"

    // Putting two dots before an identifer in a pattern match uses the value
    // for matching rather than binding against the symbol directly.
    if var Account(firstName, lastName: ..matchingLastName) as account
            = account1 {
        println("Matching first name: ", firstName)
        println("Matching account: ", account)
    }

    switch account1 {

        // Put a dot before an identifier in a pattern match to match it
        // against an enum variant of the type in its position. It is used
        // here because boolean true is a pre-imported prelude enum variant of
        // type `sylan.lang.Boolean` rather than a keyword, unlike Java or C#.
        Account(locked: .True), Account(firstName: "unlucky") {
            println("LOCKED!")
        }

        Account(expiry) if expiry < ZonedDateTime.now {
            println("ALSO LOCKED")
        }

        _ {
            println("NOT LOCKED: ")
            println(account1)
        }

        /*
         * Switches are expressions, support multiple cases, can do pattern
         * matching, and have support for conditional "guards".
         */
    }
}

/*
 * Aliasing of various constructs to allow easy code repair during large-scale
 * refactoring. Any item in any package can be aliased, which can ease module
 * versioning where new major module versions are effectively different modules.
 *
 * Class aliases can also give more readable names to anonymous function types
 * and enum variants.
 *
 * Only items in packages can be aliased in this manner; packages and modules
 * themselves cannot be aliased, although a package _import_ can.
 */
class Person = Account
interface Showable = ToString
fun factorial2 = factorial
class Predicate[_ T] = (_ value T) Bool
class MyTrue = sylan.lang.Boolean.True

final maxBound
    /**
     * Finals are allowed in the top-level of a package, and can have SyDocs
     * underneath as well as the usual modifiers. Their values must be evaluatable
     * at compile-time, meaning that package imports never trigger arbirary
     * computations.
     *
     * Unlike vars, their types must be explicitly typed out and cannot be
     * inferred.
     *
     * Local bindings with var can occur too, but only in the main package.
     */
    Int = 5

var fun meaningOfLife
    /**
     * Unlike `var`s, `var fun`s can be in the top level of non-main packages.
     */
{
    println("this is displayed every time this value is looked up")
    42
}

fun final compileTimeAdd
    /**
     * `final` functions always run at compile-time. If parameters are passed
     * that require runtime values, the compilation fails.
     */
(x Int, y Int) Int {
    x + y
}

fun anyTimeAnytime(x Int, y Int) Int { x + y }

fun final repeat(times Uint, syntax pipeline AstPipeline) Throws {
    with {
        1.up(to: times)
            .map(pipeline.source)
            .each(ast -> pipeline.write(ast)?)
        ok()
    }
}

fun json(syntax pipeline AsymmetricPipeline[from: Token, to: Ast]) Throws extern

fun embeddedLanguage(syntax pipeline Pipeline[of: Token]) Throws extern

fun testCompileTime() {
    compileTimeAdd(40, 2) |> println

    // Normal functions are run at runtime, at least _observably_. Parts might
    // be run at compile-time for optimisation if the difference is unobservable
    // in the resulting program.
    addAtAnyTime(40, 2) |> println

    // Normal functions can be explicitly run at compile-time with `!`. The same
    // rule as `final` function applies: if any argument requires runtime
    // evaluation, it fails to compile.
    addAtAnyTime!(40, 2) |> println

    // Want to run a block in compile-time without defining a function to call?
    // Just use the standard `sylan.lang.do` function with `!`:
    do! -> {
        println("this prints at compile time")
    }

    repeat(times: 4, do -> {
        println("this is a test!")
        println("this is another test!")
    })

    //
    // This ends up compiled as:
    //
    // do -> {
    //     println("this is a test!")
    //     println("this is another test!")
    // }
    // do -> {
    //     println("this is a test!")
    //     println("this is another test!")
    // }
    // do -> {
    //     println("this is a test!")
    //     println("this is another test!")
    // }
    // do -> {
    //     println("this is a test!")
    //     println("this is another test!")
    // }
    //
}

// Putting a macro on an item definition applies it to the AST of the item.
// This won't actually compile because Sylan will reject repeated declarations
// of classes of the same name, but the concept applies:
//
// ```
// class RepeatedClass @repeat(times: 3) (
//     var public x Int,
//     var public y Int,
// )
// ```
//
// In this context, the macro is known as an _annotation_.
//
// Annotations, like enum variants, can drop their parentheses if they take no
// arguments.
//
// Annotations can also be stacked up, with the AST weaving from the first
// annotation through to the last:
//
// ```
// class RepeatedClass
//     /** SyDocs go above annotations. */
//     @repeat(times: 3)
//     @repeat(times: 3)
// (
//     var public x Int,
//     var public y Int,
// )
// ```
// That will appear 9 times in total, if it actually compiled.

fun demoClosures() {
    var x = 5

    var account1 = Account(
        firstName: "Tom",
        lastName: "Smith",
        ageInYears: 15,
    )

    var firstName = "Tom"
    var lastName = "Smith"
    var age = 25
    var account2 = Account(firstName, lastName, ageInYears: age)

    var f = -> {
        println(it.toString)
    }

    f(account1)

    // Non-destructive updates can be performed by prefixing an object with a
    // `..` and calling it like a type constructor.
    f(..account2(firstName: "Emma"))

    var g = -> {
        println("returning a value")
        it
    }

    var z = g(account1)

    var n = twice(3) -> { it * 2 }
    println("n ==", n.toString())
}

class NumericLiteralsClass implements ToString {

    // Non-overflowable numbers.
    final a Int = 5
    final b UInt = 5u
    final c Decimal = 10.0

    // Overflowable, machine-width numbers.
    final d Byte = 5u8
    final e UInt16 = 11u16
    final f UInt32 = 12u32
    final g UInt64 = 13u64
    final h Int8 = 15s8
    final i Short = 13s16
    final j Int32 = 7s
    final k Long = 7s64
    final l Float = 12f
    final m Double = 8d

    fun public override toString() String {
        $"{a}{b}{c}{d}{e}{f}{g}{h}{i}{j}{k}{l}{m}"
    }
}

class AutoCloseableDemo implements AutoCloseable {

    println("Opened")

    fun public override close() {
        println("Closed")
    }
}

fun demoAutoCloseables() {

    /*
     * Sylan, like Erlang and Go, strongly discourages catching exceptional
     * problems on a routine basis - if something is truly "exceptional" then
     * the developer wouldn't have thought of a meaningful response to it.
     * Instead it encourages assertive programming through a "happy path" and
     * using supervisor tasks to allow the system to heal from unexpected
     * failures.
     *
     * Sylan does not offer `try`/`catch` for this reason, and also to ensure
     * that exception-driven control flow isn't possible.
     *
     * However, there still needs to be a strategy regarding closing resources
     * in tasks that have had unexpected failures. Sylan offers `AutoClosable`
     * types and the `use` keyword for this, which are a sort of middle ground
     * between C#'s `IDisposable` and its `using` keyword, and Go's `defer`
     * keyword.
     *
     * If an `AutoCloseable` type is prefixed with the `use` keyword, its
     * `close` method is invoked at the end of the scope _even if the
     * code in the scope completely fails unexpectedly_. The closing is done in
     * the reverse order that they are set up. If any `defer`d `close` methods
     * themselves fail, all other deferred calls are given a chance to run too,
     * and all errors are accumulated into one and rethrown once they're all
     * finished.
     *
     * The "scope" in this context is the block in which case the current
     * _whole_ expression resides.
     */

    println("Entering scope")
    do -> {
        var closeable = use AutoCloseableDemo
        println("Using closeable")
    }
    println("Leaving scope")

    // Prints "Entering scope", "Opened", "Using closeable", "Closed", and finally "Leaving scope".
}

fun demo() {
    demoIteration()

    printFactorial(42)
    var x = twice(4, do: doubled)
    println(x)

    demoContexts()
    demoPatternMatching()
    demoClosures()

    println(NumericLiteralsDemo.toString())

    demoAutoCloseable()
}

/*
 * Top-level code is allowed, but only in the main package within the main
 * module. Code in other packages must be in functions or methods.
 *
 * Top-level declarations must usually be explicitly typed and be evaluatable
 * in constant-time when loading the package, but `var` is allowed for the main
 * package meaning that type inference can be used here. They are just
 * type-inferred local variables for the top-level program which are private to
 * the `main` package.
 */

var optionalString = Optional(of: "test string")

// Like `for` and `while var`, `if var` supports multiple patterns seperated by
// commas. For the refuttable bindings of `while var` and `if var`, all
// patterns must match to continue into the block.
if var Optional(of: s) = optionalString {
    println(s)
}

var c = do -> {
    var parent = self
    spawn -> {
        counter.start(task: parent)
    }
}
5.times -> {
    send(counter.Message.Increment, to: c)
}

send(counter.Message.Get, to: c)
send(counter.Message.Increment, to: c)
send(counter.Message.Get, to: c)

// Should print 5 and then 6.
2.times -> {

    // As well as the explicit form used in an earlier example, the body can be dropped if
    // the developer wants to grab any message that matches the type with no further
    // pattern matching or timeouts.
    var n = select Int

    println(n)
}

send(counter.Message.Reset(to: 0), to: c)

print("""
3 or more quotes can be used to create a custom string delimiter.
This allows escaping almost any embedded content with few problems.
This works with interpolated and raw strings too.
""")

println(r"Raw string in which escapes characters are now read literally: \n\r")

final n = 4

println($"""
Multiline compile-time interpolated strings: {n}
""")

var x = do -> {
    println("Returning 5 to be bound as x...")
    5
}
println(x)

/*
  A multiline comment.

  /*
    A nested multiline comment.
  */
*/

demo()
