#!/usr/bin/env sylan

fun fizzBuzz(n Int) Int {
    1.up(to: n).each -> {
        switch {
            0 == (it % 15) { "FizzBuzz" }
            0 == (it % 5)  { "Fizz" }
            0 == (it % 3)  { "Buzz" }
            _              { it }
        } |> println
    }
}

enum List[Element](
    Node(element Element, next This),
    Nil,
) {
    fun each(do (element Element)) {
        if var Node(element, next) = this {
            do(element)
            next.each(do)
        }
    }
}

enum CounterMsg(Increment, Get(to recipient Task))

fun startCounter() Task {
    spawn -> {
        for var count = 0 {
            select CounterMsg {
                .Increment { continue(count + 1) }
                .Get(recipient) {
                    send(count, to: recipient)
                    continue(count)
                }
                timeout 10.seconds { throw Exception("timed out!") }
            }
        }
    }
}

do -> {
    var counter = startCounter()
    5.times -> { send(CounterMsg.Increment, to: counter) }
    sendAndWait(CounterMsg.Get(to: self), to: counter)
        |> println
}

class Name @derive(Equals) (
    var public first String: "James",
    var public last String: "Bond",
) implements ToString {

    fun public toString String {
        $tainted"The name is {lastName}, {firstName} {lastName}."
    }
}

fun final repeat(times Usize, syntax pipeline AstPipeline) Throws {
    with {
        1.up(to: times)
            .map(pipeline.source)
            .each(-> { pipeline.write(it)? })
        ok()
    }
}

fun demoContexts() Optional[Int] {
    with {
        var x = Optional(of: 5)?
        Empty?
        println("Will not be run.")
        Empty
    }
}

// There's much more! See `examples/exhaustive_example.sy` for a demo of all
// language features, with explanatory comments for each.
