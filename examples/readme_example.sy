#!/usr/bin/env sylan

fun fizzBuzz
    /** The (in)famous FizzBuzz. */
(n Int) Int {
    1.up(to: n).each -> {
        switch {
            0 == (it % 15) { "FizzBuzz" }
            0 == (it % 5) { "Fizz" }
            0 == (it % 3) { "Buzz" }
            _ { it }
        } |> println
    }
}

enum List
    /** Time for some data structures. Note: real pattern matching. */
[of Element](
    Node(of element Element, next This),
    Nil,
) {
    fun each(do (element Element)) {
        if var Node(element, next) = this {
            do(element)
            next.each(do)
        }
    }
}

// Now, Erlang-style concurrency and nested packages.

package counter {
    enum Message(
        Increment,
        Reset(with n Int),
        Get,
    )

    fun public start(task Task, n Int: 0) {
        select Message {
            .Increment {
                start(task, n: n + 1)
            }
            .Reset(n) {
                start(task, n)
            }
            .Get {
                send(n, to: task)
                start(task, n)
            }
            timeout 10.seconds {
                throw Exception("timed out!")
            }
        }
    }
}

var c = do -> {
    var parent = currentTask
    Task -> {
        counter.start(task: parent)
    }
}
5.times -> {
    send(counter.Message.Increment, to: c)
}
send(counter.Message.Get, to: c)
send(counter.Message.Increment, to: c)
send(counter.Message.Get, to: c)
2.times -> {
    var n = select Int
    println($"{n}")
}
send(counter.Message.Reset(to: 0), to: c)

class Name
    /** Easy data definition with keyword arguments and defaults. */
(
    var public first String: "James",
    var public last String: "Bond",
) implements ToString {
    fun public override toString String {
        $"The name is {lastName}, {firstName} {lastName}."
    }
}

fun demoContexts
    /** Finally, the esoteric for Haskell fans: applicative notation. */
Optional[Int] {
    with {
        var x = Some(5)?
        Empty?
        println("Will not be run.")
        Empty
    }
}

// There's much more! See `examples/exhaustive_example.sy` for a demo of all
// language features, with explanatory comments for each.
