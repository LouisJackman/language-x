#!/usr/bin/env sylan

// If no package is specified, "main" is assumed.
public package main

// A single line comment.

/*
  A multiline comment.

  /*
    A nested multiline comment.
  */
*/

import io.{println, print}

interface ToString {
    public String toString()
}

interface Concatenate<T, Result = Concatenate> {
    public Result concatenate(T y)
}

class Account: ToString, Concatenate<Account> {
    public String firstName
    public String lastName
    public int ageInYears

    public Account(String firstName, String lastName) {
        println("instantiating an Account...")
        super(.firstName, .lastName, ageInYears = 35)
    }

    public override String toString() {
        `{firstName} {lastName} is {ageInYears} years old`
    }

    public override Account concatenate(Account a) {
        var firstName = firstName.concat(a.firstName)
        var lastName = lastName.concat(a.lastName)

        Account(
            .firstName,
            .lastName,
            ageInYears = ageInYears + a.ageInYears,
        )
    }

    public String get name() {
        `{firstName} {lastName}`
    }
}

extends class Account: Concatenate<Account, Result = String> {
    public override String concatenate(This that) {
        `{firstName} {that.firstName}`
    }
}

class Person = Account
interface Showable = ToString

int maxBound = 5

int factorial(int n) {
    switch n {
        case 0, 1:
            1
        default:
            if n < 0 {
                throw Exception("n cannot be less than 0")
            }
            factorial(n * (n - 1))
    }
}

package counter {
    public enum Message {
        Increment,
        Reset(int),
        Get,
    }

    public void start(Task sender, int n = 0) {
        select Message {
            case Increment:
                start(sender, n + 1)
            case Reset(n):
                start(sender, n)
            case Get:
                sender.send(n)
            timeout 10.seconds:
                throw Exception("timed out!")
        }
    }
}

void closureDemo() {
    var x = 5

    var account1 = Account(
        firstName = "Tom",
        lastName = "Smith",
        ageInYears = 15,
    )

    var firstName = "Tom"
    var lastName = "Smith"
    var age = 25
    var account2 = Account(.firstName, .lastName, ageInYears = age)

    var f = a -> {
        println(a.toString())
    }

    f(account1)
    f(account2(firstName = "Emma"))

    var g = a -> {
        println("returning an account")
        a
    }

    var z = g(account1)
}

void demoNumericLiterals() {
    int a = 5
    uint b = 5
    decimal c = 10.0

    byte d = 5u8
    uint16 e = 11u16
    uint32 f = 12u32
    uint64 g = 13u64
    int8 h = 15s8
    short i = 13s16
    int32 j = 7s32
    long k = 7s64
    float l = 12f16
    double m = 8f32
}

String double<N>(N n) if N: Add & ToString {
    (n + n).toString()
}

void demoIteration() {
    List(1, 2, 3).forEach(n -> {
        println(`{n}`)
    })

    var highlight = s -> `>> {s} <<`

    1.to(5)
        .map(double :: #toString :: highlight)
        .forEach(println)

    var quadruple = n -> n.double().double()

    123456789
        |> quadruple
        |> #toString
        |> highlight
        |> println

    var map = HashMap(
        "abc": 123,
        "def": 321,
        "ghi": 987,
    )
    map.forEach(Entry(key, value) -> {
        println(`{key}: {value}`)
    })

    var fact = for n = 20, result = 1 {
        if n <= 0 {
            result
        } else  {
            continue(n - 1, n * result)
        }
    }
    println(`factorial: {fact}`)
}

Optional<int> demoContexts() {
    do {
        var a <- Some(5)
        doSomething()
        var b <- Empty()
        willNotBeRun()
    }
}

// Top-level code is allowed, but only in the main package. Code in other packages must be in
// functions or methods.

Optional<String> optionalString = Some("test string")
if var Some(s) = optionalString {
    println(s)
}

var c = Task(-> counter.start(Task.self))
5.times(-> c.send(counter.Message.Increment()))

c.send(counter.Message.Get())
c.send(counter.Message.Increment())
c.send(counter.Message.Get())

// Should print 5 and then 6.
2.times(->
    select int n {
        println(`{n}`)
    }
)

print("""
Multiline
strings
""")

var x = {
    println("Returning 5 to be bound as x...")
    5
}
print(`{x}`)

