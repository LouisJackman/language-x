language: rust
sudo: required

rust:
  - stable
  - beta
  - nightly

matrix:

  # Rust nightly is too unstable and in flux to actually fail the build because
  # of it.
  allow_failures:
    - rust: nightly

  fast_finish: true

# Ensure that Travis isn't wasting any time checking for submodules or cloning
# deeper than it needs to run the CI steps.
git:
  depth: 1
  quiet: true
  submodules: false

# Required for code coverage.
addons:
  apt:
    packages:
      - libcurl4-openssl-dev
      - libelf-dev
      - libdw-dev
      - cmake
      - gcc
      - binutils-dev
      - libiberty-dev

# Clippy is a Rust linter that needs to be installed before use.
before_script:
  - rustup component add rustfmt clippy

# Ensure code is formatted correctly, that there are not fatal linting errors,
# that it compiles, and that all of the tests pass.
script:
  - cargo fmt --all -- --check
  - cargo clippy --all-targets --all-features
  - cargo build
  - cargo test

# Required for code coverage with kcov and codecov.io
# Adapted from: https://github.com/codecov/example-rust
after_success: |
  set -o errexit
  set -o nounset
  set -o pipefail

  # Download and unpack the kcov program.
  wget https://github.com/SimonKagstrom/kcov/archive/master.tar.gz
  tar xzf master.tar.gz

  (
      # Build it.
      cd kcov-master
      mkdir build
      cd build
      cmake ..
      make

      # Install it.
      make install DESTDIR=../../kcov-build
  )

  # Clean it up.
  rm -rf kcov-master

  # For each test program, find the test executable and report its coverage.
  for file in $(find target/debug -maxdepth 1 -name 'sylan-*' -executable -type f)
  do

      # Generate the coverage report
      mkdir -p "target/cov/$(basename $file)"
      ./kcov-build/usr/local/bin/kcov \
          --exclude-pattern=/.cargo,/usr/lib \
          --verify "target/cov/$(basename $file)" \
          "$file"

      if [ "$?" == 0 ]
      then
          echo succeeded coverage report for file "$file"
      else
          echo failed kcov
          exit 1
      fi
  done

  # Pass report to codecov.io and finish.
  bash <(curl -s https://codecov.io/bash)
  echo Finished coverage
